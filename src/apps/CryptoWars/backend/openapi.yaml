openapi: 3.0.3
info:
  title: Cryptowars game
  description: |-
    Main Cryptowars game api
  version: 1.0.0
servers:
  - url:
      http://localhost:5000
tags:
  - name: user
    description: Operations on company users
  - name: world
    description: Operations on game worlds
  - name: town
    description: Operations on world towns
  - name: player
    description: Operations on game players
  - name: army
    description: Operations on towns army
  - name: attack
    description: War operations
  - name: battle
    description: Operations on battles
  - name: directChat
    description: Operations on direct chat
paths:
  /login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          description: successful operation
          headers:
            Set-Cookie:
              schema:
                type: string
                example: connect.sid=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid email/password supplied
      security: [ ]
  /users/{id}:
    put:
      tags:
        - user
      summary: Sign up a new user user
      operationId: signUpUser
      parameters:
        - name: id
          in: path
          description: UUID of the new user
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      requestBody:
        $ref: '#/components/requestBodies/SignUpUserRequest'
      responses:
        200:
          description: User created
        400:
          description: Invalid Request params supplied
      security: [ ]
  /worlds:
    get:
      tags:
        - world
      summary: Returns the list of worlds
      operationId: getWorlds
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/World'
        401:
          description: Unauthorized
  /worlds/{id}:
    get:
      tags:
        - world
      summary: Returns a specific world
      operationId: getWorld
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/World'

        401:
          description: Unauthorized
  /worlds/{id}/join:
    put:
      tags:
        - world
      summary: join the player to the world
      operationId: joinWorld
      parameters:
        - name: id
          in: path
          description: UUID of the world
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Done
        401:
          description: Unauthorized
  /towns/{id}/train-soldiers:
    post:
      tags:
        - town
      summary: Train a new group of soldiers
      operationId: trainSoldier
      parameters:
        - name: id
          in: path
          description: UUID of the town
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      requestBody:
        $ref: '#/components/requestBodies/TrainSoldierRequest'
      responses:
        200:
          description: Done
        400:
          description: Invalid Request params supplied
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /player:
    get:
      tags:
        - player
      summary: Get the player information
      operationId: getPlayer
      responses:
        200:
          description: Player information
        401:
          description: Unauthorized
  /status:
    get:
      responses:
        200:
          description: Im okay
      security: [ ]
  /army:
    get:
      tags:
        - army
      summary: Get the army composition
      operationId: getArmyByTownId
      parameters:
        - in: query
          name: townId
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: Army information
        401:
          description: Unauthorized
  /attacks/{id}:
    put:
      tags:
        - attack
      summary: Send an attack to other town
      operationId: CreateAttack
      parameters:
        - name: id
          in: path
          description: UUID of the new attack
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      requestBody:
        $ref: '#/components/requestBodies/CreateAttackRequest'
      responses:
        200:
          description: Attack sent
        400:
          description: Invalid Request params supplied
        401:
          description: Unauthorized
        403:
          description: Forbidden
        409:
          description: Conflict, attack already exists
        500:
          description: Forbidden
  /battles:
    get:
      tags:
        - battle
      operationId: CreateAttack
      parameters:
        - in: query
          name: armyId
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        200:
          description: list of battles of the army
        401:
          description: Unauthorized
        403:
          description: Unauthorized
  /direct-chats:
    get:
      tags:
        - directChat
      summary: Returns the list of direct chats of a player
      operationId: getDirectChats
      responses:
        200:
          description: successful operation
        401:
          description: Unauthorized
  /direct-chats/{id}:
    put:
      tags:
        - directChat
      summary: Create a new direct chat with other player
      operationId: createChat
      parameters:
        - name: id
          in: path
          description: UUID of the chat
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
      requestBody:
        $ref: '#/components/requestBodies/TrainSoldierRequest'
      responses:
        200:
          description: Done
        401:
          description: Unauthorized
  /direct-chats/{id}/messages:
    get:
      tags:
        - directChat
      summary: Returns the list of messages of a chat
      operationId: getDirectChatMessages
      responses:
        200:
          description: successful operation
        401:
          description: Unauthorized
components:
  requestBodies:
    TrainSoldierRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              soldiers:
                $ref: '#/components/schemas/TownSoldiers'
    CreateChatRequest:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              playerTwoId:
                $ref: '#/components/schemas/Uuid'
            required:
              - playerTwoId
    LoginRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                uniqueItems: true
                example: theUser
                format: email
              password:
                type: string
                example: superStrongPassword
            required:
              - username
              - password
    SignUpUserRequest:
      description: Creates a new user
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                uniqueItems: true
                example: theUser
                format: email
              password:
                type: string
                example: superStrongPassword
            required:
              - email
              - password
    CreateAttackRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              attackerArmy:
                $ref: '#/components/schemas/Uuid'
              defenderTown:
                $ref: '#/components/schemas/Uuid'
              soldiers:
                $ref: '#/components/schemas/TownSoldiers'
            required:
              - attackerArmy
              - defenderTown
              - soldiers
  schemas:
    TownSoldiers:
      type: object
      minProperties: 1
      properties:
        basic:
          type: number
          minimum: 1
          example: 2
    Uuid:
      type: string
      example: f01ea82a-8365-4963-84ec-d73b974f46e2
      format: uuid
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    World:
      type: object
      properties:
        id:
          type: string
          example: f01ea82a-8365-4963-84ec-d73b974f46e2
          format: uuid
        name:
          type: string
          example: SuperFancyWorld
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
security:
  - cookieAuth: [ ]
